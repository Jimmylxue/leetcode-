/**
给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。

不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。

说明:

为什么返回数值是整数，但输出的答案是数组呢?

请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。

你可以想象内部操作如下:
// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
int len = removeDuplicates(nums);

// 在函数里修改输入数组对于调用者是可见的。
// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。
for (int i = 0; i < len; i++) {
    print(nums[i]);
}

 
示例 1：

输入：nums = [1,1,2]
输出：2, nums = [1,2]
解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素

示例 2：

输入：nums = [0,0,1,1,1,2,2,3,3,4]
输出：5, nums = [0,1,2,3,4]
解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。

提示：

0 <= nums.length <= 3 * 104
-104 <= nums[i] <= 104
nums 已按升序排列

 */

/**
  双指针
  思路
  用一个读指针，一个写指针遍历数组。
  遇到重复的元素 读指针 就继续前移。
  遇到不同的元素 写指针 就前移一步，写入那个元素。

  如： [0,0,1,1,1,2,2,3,3,4]

    刚开始 读指针和写指针都指向 0 读指针和写指针都是0 读指针往前 现在读指针和写指针对象分别还是 0 和 0 
      还是相等 读指针再往前 现在是读指针和写指针是 0 和 1 两者不同 写指针往前 且将写指针对应的那个值改为读指针的那个值 [0,1,1,1,1....]
      再继续读指针和写指针比较 相同 读指针再往前  继续持续这个操作 直到读指针遍历完了整个数组 
      
      最终写指针指向的位置就是去重的数组的最后一位数
 */

/**
 * @param {number[]} nums
 * @return {number}
 */
var removeDuplicates = function (nums) {
	let p1 = 0, // 写指针
		p2 = 0 // 读指针

	while (p2 < nums.length) {
		if (nums[p1] != nums[p2]) {
			/**
			 * 读指针和写指针不同  写指针向前 并记录下这个值
			 */
			p1++
			nums[p1] = nums[p2]
		}
		// 读指针和写指针相同 读指针向前
		p2++
	}
	return p1 + 1
}
